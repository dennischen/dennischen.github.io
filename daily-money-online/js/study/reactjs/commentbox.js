define(["exports", "../../lib/opt/marked.min"], function(exports,marked) {
	var CommentBox = React.createClass({displayName: "CommentBox",
	  loadCommentsFromServer: function() {
	    $.ajax({
	      url: this.props.url,
	      dataType: 'json',
	      cache: false,
	      success: function(data) {
	        this.setState({data: data});
	      }.bind(this),
	      error: function(xhr, status, err) {
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });
	  },		
	  getInitialState: function() {
	    return {data: []};
	  },
	  componentDidMount: function() {
	    this.loadCommentsFromServer();
    	setInterval(this.loadCommentsFromServer, this.props.pollInterval);
	  },
	  handleCommentSubmit: function(comment) {
		var comments = this.state.data;
	    // Optimistically set an id on the new comment. It will be replaced by an
	    // id generated by the server. In a production application you would likely
	    // not use Date.now() for this and would have a more robust system in place.
    	comment.id = Date.now();
    	var newComments = comments.concat([comment]);
    	this.setState({data: newComments});

	    $.ajax({
	      url: this.props.url,
	      dataType: 'JSON',
	      type: 'POST',
	      data: comment,
	      success: function(data) {
	        //this.setState({data: data});
	      }.bind(this),
	      error: function(xhr, status, err) {
	      	//this.setState({data: comments});
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });
	  },
	  handleCommentDelete: function(comment) {
		var comments = this.state.data;
    	var newComments = [];
    	for (var i = 0; i < comments.length; i++) {
    		if(comments[i].id != comment.id){
    			newComments.push(comments[i]);
    		}
    	}
    	this.setState({data: newComments});
	    $.ajax({
	      url: this.props.url+"/"+comment.id,
	      dataType: 'json',
	      type: 'DELETE',
	      success: function(data) {
	        //this.setState({data: data});
	      }.bind(this),
	      error: function(xhr, status, err) {
	      	//this.setState({data: comments});
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });
	  },
	  handleCommentUpdate: function(comment) {
		var comments = this.state.data;
    	for (var i = 0; i < comments.length; i++) {
    		if(comments[i].id == comment.id){
    			comments[i].text = comment.text;
    		}
    	}
    	this.setState({data: comments});
	    $.ajax({
	      url: this.props.url+"/"+comment.id,
	      dataType: 'json',
	      type: 'POST',
	      data: comment,
	      success: function(data) {
	        //this.setState({data: data});
	      }.bind(this),
	      error: function(xhr, status, err) {
	      	//this.setState({data: comments});
	        console.error(this.props.url, status, err.toString());
	      }.bind(this)
	    });    	
	  },	  	  
	  render: function() {
	    return (
	      React.createElement("div", {className: "commentBox"}, 
	        React.createElement("h1", null, "Comments"), 
	        React.createElement(CommentForm, {onCommentSubmit: this.handleCommentSubmit}), 
	        React.createElement(CommentList, {data: this.state.data, 
	        	onCommentDelete: this.handleCommentDelete, 
	        	onCommentUpdate: this.handleCommentUpdate})
	      )
	    );
	  }
	});


	var CommentList = React.createClass({displayName: "CommentList",
	  render: function() {
	    var commentNodes = this.props.data.map(function(comment) {
	      return (
	        React.createElement(Comment, {author: comment.author, key: comment.id, id: comment.id, text: comment.text, 
	        	onCommentDelete: this.props.onCommentDelete, 
	        	onCommentUpdate: this.props.onCommentUpdate}
	        )
	      );
	    },this);

	    return (
	      React.createElement("div", {className: "commentList"}, 
	        commentNodes
	      )
	    );
	  }
	});	


	var Comment = React.createClass({displayName: "Comment",
	  getInitialState: function() {
	    return {text: ''};
	  },
	  rawMarkup: function() {
	    var rawMarkup = marked(this.props.text, {sanitize: true});
	    return { __html: rawMarkup };
	  },
	  handleDelete: function(){
	  	 this.props.onCommentDelete({id:this.props.id});
	  },
	  handleUpdate: function(){
	    var text = this.state.text.trim();
	    if (!text) {
	      return;
	    }
	  	 this.props.onCommentUpdate({id:this.props.id, text:text});
	  },
	  handleTextChange: function(e) {
	    this.setState({text: e.target.value});
	  },
	  render: function() {
	    return (
	      React.createElement("div", {className: "comment"}, 
	        React.createElement("h2", {className: "commentAuthor"}, 
	          this.props.author
	        ), 
	        React.createElement("span", {dangerouslySetInnerHTML: this.rawMarkup()}), 
	        React.createElement("input", {
	          type: "text", 
	          placeholder: this.props.text, 
	          value: this.state.text, 
	          onChange: this.handleTextChange}
	        ), React.createElement("br", null), 
	        React.createElement("div", null, 
	       		React.createElement("button", {onClick: this.handleDelete}, "Delete"), 
	       		React.createElement("button", {onClick: this.handleUpdate}, "Update")
	       	)
	      )
	    );
	  }
	});	

	var CommentForm = React.createClass({displayName: "CommentForm",
	  getInitialState: function() {
	    return {author: '', text: ''};
	  },
	  handleAuthorChange: function(e) {
	    this.setState({author: e.target.value});
	  },
	  handleTextChange: function(e) {
	    this.setState({text: e.target.value});
	  },
	  handleSubmit: function(e) {
	    e.preventDefault();
	    var author = this.state.author.trim();
	    var text = this.state.text.trim();
	    if (!text || !author) {
	      return;
	    }
	    this.props.onCommentSubmit({author: author, text: text});
	    this.setState({author: '', text: ''});
	  },	  
	  render: function() {
	    return (
	      React.createElement("form", {className: "commentForm", onSubmit: this.handleSubmit}, 
	      	React.createElement("div", null, 
		        React.createElement("input", {
		          type: "text", 
		          placeholder: "Your name", 
		          value: this.state.author, 
		          onChange: this.handleAuthorChange}
		        ), 
		        React.createElement("input", {
		          type: "text", 
		          placeholder: "Say something...", 
		          value: this.state.text, 
		          onChange: this.handleTextChange}
		        ), 
		        React.createElement("input", {type: "submit", value: "Post"})
	        )
	      )
	    );
	  }
	});	
	
	exports.CommentBox = CommentBox;
});
//# sourceMappingURL=../../../srcmap/study/reactjs/commentbox.js.map
